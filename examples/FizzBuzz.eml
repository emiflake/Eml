begin FizzBuzz

eq : a -> a -> Bool
eq = \x y. (eval "x==y")

mod : Num -> Num -> Num
mod = \x y. (eval "x % y")

and : Bool -> Bool -> Bool
and = (eval "x=>y=>x && y")

show : forall a. a -> String
show = (eval "x=>x.toString()")

divides = \a b. (eq (mod a b) 0)

concatStr : String -> String -> String
concatStr = (eval "x=>y=>x+y")

log : a -> Unit
log = (eval "console.log")

fizzbuzz =
  let one = \x.
    if (and (divides x 3) (divides x 5)) then
      "Fizzbuzz"
    else if (divides x 3) then
      "Fizz"
    else if (divides x 5) then
      "Buzz"
    else
      (show x)
  in
  \n. if (eq 0 n) then "" else (concatStr (concatStr (fizzbuzz (n - 1)) "\n") (one n))



cons : Num -> NumList -> NumList
cons = \x xs. (eval "[x].concat(xs)")

nil : NumList
nil = (eval "[]")

x = [2, 5, 10, 100]

map : (Num -> Num) -> NumList -> NumList
map = \f xs. (eval "xs.map(f)")

main = \_. (log (map (\x. x) x))
